# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

spring.datasource.url=jdbc:postgresql://db-8b359532-747b-4ccc-95b4-b3122eb1d8c0.c7uxaqxgfov3.us-west-2.rds.amazonaws.com:5432/cc_database_dev
spring.datasource.username=urex6324rg8u0iwy
spring.datasource.password=8429j4vuqqs09ajzrq713cvbh
#spring.datasource.driver=org.postgresql.Driver
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.initial-size=1
spring.datasource.max-active=2
spring.datasource.max-age=1000
spring.datasource.min-idle=0
spring.datasource.min-evictable-idle-time-millis=60000 

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql=true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto=update

# Naming strategy
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

spring.jpa.properties.hibernate.default_schema=public

